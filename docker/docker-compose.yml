version: '3.8'

services:

  spring-rabbitmq:
    image: rabbitmq:management
    container_name: spring-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=my-rabbitmq
    networks:
      - dev
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  spring-mailhog:
    image: mailhog/mailhog:latest
    container_name: spring-mailhog
    ports:
      - "1025:1025"   # SMTP port
      - "8025:8025"   # UI port
    environment:
      - MH_HOSTNAME=spring-mailhog
    networks:
      - dev
    healthcheck:
      test: ["CMD", "nc", "-zv", "127.0.0.1", "8025"]
      interval: 5s
      timeout: 5s
      retries: 3

  vault:
    image: hashicorp/vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    networks:
      - dev

  spring-postgres:
    image: postgres:16
    container_name: spring-postgres
    environment:
      POSTGRES_PASSWORD: postgrez
    ports:
      - "5432:5432"
    networks:
      - dev

  spring-mysql-master:
    image: bitnami/mysql:8.0
    container_name: spring-mysql-master
    environment:
      MYSQL_DATABASE: webserver
      MYSQL_PASSWORD: my-sql-password
      MYSQL_USER: user
      MYSQL_ROOT_PASSWORD: my-sql-password
    ports:
      - "3306:3306"
    networks:
      - dev
    restart: always
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u$$MYSQL_USER', '-p$$MYSQL_PASSWORD' ]
      timeout: 30s
      interval: 5s
      retries: 5

#  spring-mysql-slave:
#    image: bitnami/mysql:8.0
#    container_name: spring-mysql-slave
#    environment:
#      MYSQL_DATABASE: api_db
#      MYSQL_PASSWORD: my-sql-password
#      MYSQL_USER: user
#      MYSQL_ALLOW_EMPTY_PASSWORD: no
#      MYSQL_RANDOM_ROOT_PASSWORD: yes
#      MYSQL_REPLICATION_MASTER: spring-mysql-master
#      MYSQL_REPLICATION_MODE: slave
#      MYSQL_MASTER_HOST: spring-mysql-master
#      MYSQL_MASTER_PORT: 3306
#    depends_on:
#      - spring-mysql-master
#    networks:
#      - dev

  spring-redis-master:
    image: redis
    container_name: spring-redis-master
    volumes:
      - ./data/spring-redis-master/data:/data
    networks:
      - dev
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 30s
      interval: 5s
      retries: 5

  spring-redis-slave:
    image: redis
    container_name: spring-redis-slave
    volumes:
      - ./data/spring-redis-slave/data:/data
    ports:
      - "6380:6380"
    command: --port 6380 --slaveof spring-redis-master 6379
    networks:
      - dev
    depends_on:
      - spring-redis-master
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6380", "ping" ]
      timeout: 30s
      interval: 5s
      retries: 5

  spring-redis-commander:
    container_name: spring-redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    volumes:
      - ./data/spring-redis-commander/data:/data
    environment:
      - REDIS_HOSTS=master:spring-redis-master,slave-1:spring-redis-slave
    ports:
      - "8081:8081"
    networks:
      - dev
    depends_on:
      - spring-redis-slave

  spring-webserver:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: carrey1994/spring-webserver:latest
    volumes:
      - type: bind
        source: application.yml
        target: /webserver/application.yml
    container_name: spring-webserver
    ports:
      - "8080:8080"
    networks:
      - dev
    depends_on:
      spring-mysql-master:
        condition: service_healthy
      spring-redis-master:
        condition: service_healthy
      spring-redis-slave:
        condition: service_healthy
      spring-rabbitmq:
        condition: service_healthy
      spring-mailhog:
        condition: service_healthy

networks:
  dev:
    driver: bridge
