version: '3.8'

services:

  spring-rabbitmq:
    image: rabbitmq:management
    container_name: spring-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=my-rabbitmq
    networks:
      - dev
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  spring-mailhog:
    image: mailhog/mailhog:latest
    container_name: spring-mailhog
    ports:
      - "1025:1025"   # SMTP port
      - "8025:8025"   # UI port
    environment:
      - MH_HOSTNAME=spring-mailhog
    networks:
      - dev
    healthcheck:
      test: ["CMD", "nc", "-zv", "127.0.0.1", "8025"]
      interval: 5s
      timeout: 5s
      retries: 3

  spring-sonarqube:
    profiles: [ "sonar" ]
    image: sonarqube:community
    ports:
      - "9000:9000"
      - "9092:9092"
    networks:
      - dev

  spring-postgres:
    image: postgres
    container_name: spring-postgres
    environment:
      POSTGRES_DB: webserver
      POSTGRES_USER: user
      POSTGRES_PASSWORD: my-postgres-password
    ports:
      - "5432:5432"
    networks:
      - dev
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 3

  spring-redis-master:
    image: redis
    container_name: spring-redis-master
    volumes:
      - ./data/spring-redis-master/data:/data
    networks:
      - dev
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 30s
      interval: 5s
      retries: 5

  spring-redis-slave:
    image: redis
    container_name: spring-redis-slave
    volumes:
      - ./data/spring-redis-slave/data:/data
    ports:
      - "6380:6380"
    command: --port 6380 --replicaof spring-redis-master 6379
    networks:
      - dev
    depends_on:
      - spring-redis-master
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6380", "ping" ]
      timeout: 30s
      interval: 5s
      retries: 5

  spring-redis-commander:
    container_name: spring-redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    volumes:
      - ./data/spring-redis-commander/data:/data
    environment:
      - REDIS_HOSTS=master:spring-redis-master,slave-1:spring-redis-slave
    ports:
      - "8081:8081"
    networks:
      - dev
    depends_on:
      - spring-redis-slave

  spring-webserver:
    profiles: [ "webserver" ]
    image: carrey1994/spring-webserver:latest
    volumes:
      - type: bind
        source: application.yml
        target: /webserver/application.yml
    container_name: spring-webserver
    ports:
      - "8080:8080"
      - "5005:5005"
    networks:
      - dev
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n"
    depends_on:
      spring-postgres:
        condition: service_healthy
      spring-redis-master:
        condition: service_healthy
      spring-redis-slave:
        condition: service_healthy
      spring-rabbitmq:
        condition: service_healthy
      spring-mailhog:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - dev
    volumes:
      - ../kubernetes/prometheus/config:/etc/prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet --tries=1 --timeout=5 http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - "9093:9093"
    networks:
      - dev
    volumes:
      - ../kubernetes/alert-manager/config:/config
    command: --config.file=/config/alertmanager.yml --log.level=debug
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet --tries=1 --timeout=5 http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - dev
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet --tries=1 --timeout=5 http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dev:
    driver: bridge
